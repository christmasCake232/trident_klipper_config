[delayed_gcode _on_boot]
initial_duration: 0.5
gcode:
    M118 Hello World
    NOZZLE_COOL_DOWN                                     # cool down nozzle if hot
    SET_FILAMENT_SENSOR SENSOR=filament_encoder ENABLE=0 # disable filament_encoder on boot
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=105  # turn on the house lights via heater_bed
    G4 P4000                                             # delay 4s
    # TURN_OFF_HEATERS                                     # disable all heaters

[delayed_gcode NOZZLE_COOL_DOWN_DELAYED]
gcode:
    {% if printer.extruder.temperature | int >= 50 %}
        UPDATE_DELAYED_GCODE ID=NOZZLE_COOL_DOWN_DELAYED DURATION=10.0
    {% else %}
        M106 S0
    {% endif %}
    

[gcode_macro NOZZLE_COOL_DOWN]
gcode:
    {% if printer.extruder.temperature | int >= 50 %}
        UPDATE_DELAYED_GCODE ID=NOZZLE_COOL_DOWN_DELAYED DURATION=10.0
        SET_HEATER_TEMPERATURE HEATER=extruder TARGET=0
        M106 S255
    {% endif %}


[gcode_macro CANCEL_PRINT]
rename_existing: _CANCEL_PRINT
gcode:
    _CANCEL_PRINT
    _RESET_PRINTER_LIMITS


[gcode_macro  PRINTER_STANDBY]
description : disable everything
gcode :
    TURN_OFF_HEATERS # disable all heaters
    M107             # fans
    M84              # steppers


# call from slicer printer start gcode; for example, with PrusaSlicer:
#   START_PRINT EXTRUDER_TEMP=[first_layer_temperature] BED_TEMP=[first_layer_bed_temperature] FILAMENT_TYPE=[filament_type]
[gcode_macro START_PRINT]
gcode :
    {% set extruder_temp = params.EXTRUDER_TEMP | default(printer.extruder.target, true) %}
    {% set bed_temp      = params.BED_TEMP      | default(printer.heater_bed.target, true) %}
    {% set chamber_temp  = params.CHAMBER_TEMP  | default(40) | float %}

    M118 Print startup...

    ## reset various states to configured or safe defaults
    CLEAR_PAUSE

    # Reset speed and extrusion rates, in case they were manually changed
    M220 S100
    M221 S100

    G21   ; Metric values
    G90   ; Absolute positioning
    M82   ; Set extruder to absolute mode

    M118  Heating bed({ bed_temp }C)
    M190 S{ bed_temp }

    M106 S0 ; disable fan if running

    # M118 heating chamber and bed to {chamber_temp}

    M118 Setting extruder to 150C
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET=150
    
    M118 Tramming...
    BED_MESH_CLEAR
    _TRAM_PRINTER EXTRUDER_TEMP=150

    M118 Heating extruder({ extruder_temp }C)
    M109 S{ extruder_temp }

    M118 Purging...
    LINE_PURGE

    M83     ; relative distances for extrusion
    G92 E0  ; reset extrusion

    M118 Printing....
    # M220 S90 ; TODO
    enable_filament_encoder


[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode :
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-10.0 F3600                ; retract filament
    G91                            ; relative positioning
    G0 Z1.00 X20.0 Y20.0 F20000    ; move nozzle to remove stringing
    TURN_OFF_HEATERS
    M107                           ; turn off fan
    G1 Z2 F3000                    ; move nozzle up 2mm
    G90                            ; absolute positioning
    G0  X125 Y250 F3600            ; park nozzle at rear
    M84                            ; steppers off
    BED_MESH_CLEAR
    CHAMBER_EXHAUST_ON DURATION=30
    AUTOCYCLE_HEATER_BED

    _RESET_PRINTER_LIMITS
    jam_report


[gcode_macro _RESET_PRINTER_LIMITS]
gcode:
    # SET_VELOCITY_LIMIT ACCEL=8000
    {% set max_accel              = printer.configfile.settings.printer.max_accel %}
    {% set square_corner_velocity = printer.configfile.settings.printer.square_corner_velocity %}
    SET_VELOCITY_LIMIT ACCEL={ max_accel } SQUARE_CORNER_VELOCITY={ square_corner_velocity }
    M220 S100


[gcode_macro _HOME_X]
gcode :
    # Always use consistent run_current on A/B steppers during sensorless homing
    {% set RUN_CURRENT_X = printer.configfile.settings['tmc5160 stepper_x'].run_current | float %}
    {% set RUN_CURRENT_Y = printer.configfile.settings['tmc5160 stepper_y'].run_current | float %}
    {% set HOME_CURRENT = 0.7 %}
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}

    M118 Homing X
    G28 X
    # Move away
    G91
    G1 X-10 F1200

    # Wait just a second… (give StallGuard registers time to clear)
    G4 P1000
    # Set current during print
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}

[gcode_macro _HOME_Y]
gcode :
    # Set current for sensorless homing
    {% set RUN_CURRENT_X = printer.configfile.settings['tmc5160 stepper_x'].run_current | float %}
    {% set RUN_CURRENT_Y = printer.configfile.settings['tmc5160 stepper_y'].run_current | float %}
    {% set HOME_CURRENT = 0.7 %}
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}

    M118 Homing Y
    G28 Y
    # Move away
    G91
    G1 Y-10 F1200

    # Wait just a second… (give StallGuard registers time to clear)
    G4 P1000
    # Set current during print
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}

[gcode_macro _HOME_Z_DISABLE_Z_TILT_ADJUST]
gcode :
    SET_GCODE_VARIABLE MACRO=_HOME_Z VARIABLE=disable_z_tilt_adjust VALUE=1

[gcode_macro _HOME_Z]
variable_disable_z_tilt_adjust: 0
gcode :
    {% set disable_z_tilt_adjust = printer["gcode_macro _HOME_Z"].disable_z_tilt_adjust | int %}

    SET_GCODE_VARIABLE MACRO=_HOME_Z VARIABLE=disable_z_tilt_adjust VALUE=0

    M118 Homing Z
    G90                        ; Absolute positioning
    SET_KINEMATIC_POSITION Z=0
    G0 Z15 F500                ; raise bed to 15

    G0 X150 Y150 F18000        ; move to X150 Y150 ; not needed?
    G28 Z                      ; home Z
    {% if disable_z_tilt_adjust != 1 %}
        # M118 Z TILT ADJUST
        Z_TILT_ADJUST
        G0 X150 Y150 F18000    ; move to X150 Y150 ; not needed?
        G28 Z                  ; home Z
    {% endif %}

    G0 Z5 F500                 ; raise bed to 5


[homing_override]
axes : xyz
gcode :
    {% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}

    {% if home_all or 'Y' in params %}
        _HOME_Y
    {% endif %}

    {% if home_all or 'X' in params %}
        _HOME_X
    {% endif %}

    {% if home_all or 'Z' in params %}
        _HOME_Z
    {% endif %}


[gcode_macro _TRAM_PRINTER]
description : G28 XYZ, Z_TILT_ADJUST, UNSAFE_BED_MESH_CALIBRATE, wrapped with DEPLOY_PROBE/STOW_PROBE
gcode :
    {% set extruder_temp = params.EXTRUDER_TEMP | default(0) | int %}
    M118 Tramming printer
    M118 Homing XY
    G28 X Y

    M118 Homing Z and Z tilt adjust
    BED_MESH_CLEAR

    {% if extruder_temp != 0 %}
        M118 Heating extruder({ extruder_temp }C)
        M109 S{ extruder_temp }
    {% endif %}
    
    G28 Z

    M118 Bed mesh calibrate
    BED_MESH_CALIBRATE ADAPTIVE=1


[gcode_macro M600]
description : TODO
gcode :
    {% set X = params.X | default(50) | float %}
    {% set Y = params.Y |  default(0) | float %}
    {% set Z = params.Z | default(10) | float %}
    SAVE_GCODE_STATE NAME=M600_state
    PAUSE
    G91
    G1 E-.8 F2700
    G1 Z{Z}
    G90
    G1 X{X} Y{Y} F3000
    G91
    G1 E-50 F1000
    RESTORE_GCODE_STATE NAME=M600_state

